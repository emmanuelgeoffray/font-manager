{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/ids.ts","../src/utils/request.ts","../src/google-fonts/fontList.ts","../src/font-styles/declarations.ts","../src/font-styles/stylesheets.ts","../src/utils/regex.ts","../src/google-fonts/extractFontStyles.ts","../src/google-fonts/fontStylesheet.ts","../src/loadFonts.ts","../src/types.ts","../src/FontManager.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\n * Return the fontId based on the provided font family\n */\nexport function getFontId(fontFamily: string): string {\n\treturn fontFamily.replace(/\\s+/g, \"-\").toLowerCase();\n}\n\n/**\n * Throw an error if the provided pickerId doesn't consist only of letters and digits\n */\nexport function validatePickerId(pickerId: string): void {\n\tif (pickerId.match(/[^0-9a-z]/i)) {\n\t\tthrow Error(\"The `pickerId` parameter may only contain letters and digits\");\n\t}\n}\n","/**\n * Execute a GET XMLHttpRequest and return the result\n */\nexport default function get(url: string): Promise<string> {\n\treturn new Promise((resolve, reject): void => {\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.overrideMimeType(\"application/json\");\n\t\trequest.open(\"GET\", url, true);\n\t\trequest.onreadystatechange = (): void => {\n\t\t\t// Request has completed\n\t\t\tif (request.readyState === 4) {\n\t\t\t\tif (request.status !== 200) {\n\t\t\t\t\t// On error\n\t\t\t\t\treject(new Error(`Response has status code ${request.status}`));\n\t\t\t\t} else {\n\t\t\t\t\t// On success\n\t\t\t\t\tresolve(request.responseText);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\trequest.send();\n\t});\n}\n","import { Font, Script } from \"../types\";\nimport { getFontId } from \"../utils/ids\";\nimport get from \"../utils/request\";\n\nconst LIST_BASE_URL = \"https://www.googleapis.com/webfonts/v1/webfonts\";\n\n/**\n * Font object returned by the Google API. Contains a field \"subsets\" which will be renamed to\n * \"scripts\"\n */\ninterface FontResponse extends Font {\n\tsubsets: Script[];\n}\n\n/**\n * Fetch the list of all available fonts from the Google Fonts API\n */\nexport default async function getFontList(apiKey: string): Promise<Font[]> {\n\t// Request list of all Google Fonts, sorted by popularity\n\tconst url = new URL(LIST_BASE_URL);\n\turl.searchParams.append(\"sort\", \"popularity\");\n\turl.searchParams.append(\"key\", apiKey);\n\tconst response = await get(url.href);\n\n\t// Parse font list\n\tconst json = JSON.parse(response);\n\n\t// For each font:\n\t// - Rename \"subset\" key to \"script\"\n\t// - Generate fontId\n\t// Return the updated list\n\tconst fontsOriginal = json.items;\n\treturn fontsOriginal.map(\n\t\t(fontOriginal: FontResponse): Font => {\n\t\t\tconst { family, subsets, ...others } = fontOriginal;\n\t\t\treturn {\n\t\t\t\t...others,\n\t\t\t\tfamily,\n\t\t\t\tid: getFontId(family),\n\t\t\t\tscripts: subsets,\n\t\t\t};\n\t\t},\n\t);\n}\n","import { Font } from \"../types\";\nimport { getFontId } from \"../utils/ids\";\n\nconst previewFontsStylesheet = document.createElement(\"style\");\ndocument.head.appendChild(previewFontsStylesheet);\n\n/**\n * Add declaration for applying the specified preview font\n */\nexport function applyFontPreview(previewFont: Font, selectorSuffix: string): void {\n\tconst fontId = getFontId(previewFont.family);\n\tconst style = `\n\t\t\t#font-button-${fontId}${selectorSuffix} {\n\t\t\t\tfont-family: \"${previewFont.family}\";\n\t\t\t}\n\t\t`;\n\tpreviewFontsStylesheet.appendChild(document.createTextNode(style));\n}\n\n/**\n * Create/find and return the apply-font stylesheet for the provided selectorSuffix\n */\nfunction getActiveFontStylesheet(selectorSuffix: string): HTMLStyleElement {\n\tconst stylesheetId = `active-font-${selectorSuffix}`;\n\tlet activeFontStylesheet = document.getElementById(stylesheetId) as HTMLStyleElement;\n\tif (!activeFontStylesheet) {\n\t\tactiveFontStylesheet = document.createElement(\"style\");\n\t\tactiveFontStylesheet.id = stylesheetId;\n\t\tdocument.head.appendChild(activeFontStylesheet);\n\t}\n\treturn activeFontStylesheet;\n}\n\n/**\n * Add/update declaration for applying the current active font\n */\nexport function applyActiveFont(\n\tactiveFont: Font,\n\tpreviousFontFamily: string,\n\tselectorSuffix: string,\n): void {\n\tconst style = `\n\t\t.apply-font${selectorSuffix} {\n\t\t\tfont-family: \"${activeFont.family}\"${previousFontFamily ? `, \"${previousFontFamily}\"` : \"\"};\n\t\t}\n\t`;\n\tconst activeFontStylesheet = getActiveFontStylesheet(selectorSuffix);\n\tactiveFontStylesheet.innerHTML = style;\n}\n","const PREVIEW_ATTRIBUTE_NAME = \"data-is-preview\";\n\n/**\n * Generate font stylesheet ID from fontId\n */\nfunction getStylesheetId(fontId: string): string {\n\treturn `font-${fontId}`;\n}\n\n/**\n * Check whether a font stylesheet already exists in the document head\n */\nexport function stylesheetExists(fontId: string, isPreview?: boolean): boolean {\n\tconst stylesheetNode = document.getElementById(getStylesheetId(fontId));\n\tif (isPreview === null || isPreview === undefined) {\n\t\treturn stylesheetNode !== null;\n\t}\n\treturn (\n\t\tstylesheetNode !== null &&\n\t\tstylesheetNode.getAttribute(PREVIEW_ATTRIBUTE_NAME) === isPreview.toString()\n\t);\n}\n\n/**\n * Attach a new font stylesheet to the document head using the provided content\n */\nexport function createStylesheet(fontId: string, isPreview: boolean): void {\n\tconst stylesheetNode = document.createElement(\"style\");\n\tstylesheetNode.id = getStylesheetId(fontId);\n\tstylesheetNode.setAttribute(PREVIEW_ATTRIBUTE_NAME, isPreview.toString());\n\tdocument.head.appendChild(stylesheetNode);\n}\n\n/**\n * Insert the provided styles in the font's <style> element (existing styles are replaced)\n */\nexport function fillStylesheet(fontId: string, styles: string): void {\n\tconst stylesheetId = getStylesheetId(fontId);\n\tconst stylesheetNode = document.getElementById(stylesheetId);\n\tif (stylesheetNode) {\n\t\tstylesheetNode.textContent = styles;\n\t} else {\n\t\tconsole.error(`Could not fill stylesheet: Stylesheet with ID \"${stylesheetId}\" not found`);\n\t}\n}\n\n/**\n * Update the value of a stylesheet's \"data-is-preview\" attribute\n */\nexport function setStylesheetType(fontId: string, isPreview: boolean): void {\n\tconst stylesheetId = getStylesheetId(fontId);\n\tconst stylesheetNode = document.getElementById(stylesheetId);\n\tif (stylesheetNode) {\n\t\tstylesheetNode.setAttribute(PREVIEW_ATTRIBUTE_NAME, isPreview.toString());\n\t} else {\n\t\tconsole.error(\n\t\t\t`Could not change stylesheet type: Stylesheet with ID \"${stylesheetId}\" not found`,\n\t\t);\n\t}\n}\n","/**\n * Execute the provided regex on the string and return all matched groups\n */\nexport default function getMatches(regex: RegExp, str: string): string[] {\n\tconst matches: string[] = [];\n\tlet match;\n\tdo {\n\t\tmatch = regex.exec(str);\n\t\tif (match) {\n\t\t\tmatches.push(match[1]);\n\t\t}\n\t} while (match);\n\treturn matches;\n}\n","import { getFontId } from \"../utils/ids\";\nimport getMatches from \"../utils/regex\";\n\nconst FONT_FACE_REGEX = /@font-face {([\\s\\S]*?)}/gm;\nconst FONT_FAMILY_REGEX = /font-family: ['\"](.*?)['\"]/gm;\n\n/**\n * Parse the list of @font-face rules provided by the Google Fonts API. Split up the rules\n * according to the font family and return them in an object\n */\nexport default function extractFontStyles(allFontStyles: string): Record<string, string> {\n\t// Run Regex to separate font-face rules\n\tconst rules = getMatches(FONT_FACE_REGEX, allFontStyles);\n\n\t// Assign font-face rules to fontIds\n\tconst fontStyles: Record<string, string> = {};\n\trules.forEach((rule): void => {\n\t\t// Run regex to get font family\n\t\tconst fontFamily = getMatches(FONT_FAMILY_REGEX, rule)[0];\n\t\tconst fontId = getFontId(fontFamily);\n\n\t\t// Append rule to font font family's other rules\n\t\tif (!(fontId in fontStyles)) {\n\t\t\tfontStyles[fontId] = \"\";\n\t\t}\n\t\tfontStyles[fontId] += `@font-face {\\n${rule}\\n}\\n\\n`;\n\t});\n\treturn fontStyles;\n}\n","import { Font, Script, Variant } from \"../types\";\nimport get from \"../utils/request\";\n\nconst FONT_BASE_URL = \"https://fonts.googleapis.com/css\";\n\n/**\n * Return URL to the Google Fonts stylesheet for the specified font families and variants.\n * If previewsOnly is set to true, only the characters contained in the font family names are\n * included\n */\nexport default async function getStylesheet(\n\tfonts: Font[],\n\tscripts: Script[],\n\tvariants: Variant[],\n\tpreviewsOnly: boolean,\n): Promise<string> {\n\tconst url = new URL(FONT_BASE_URL);\n\n\t// Build query URL for specified font families and variants\n\tconst variantsStr = variants.join(\",\");\n\tconst familiesStr = fonts.map((font): string => `${font.family}:${variantsStr}`);\n\turl.searchParams.append(\"family\", familiesStr.join(\"|\"));\n\n\t// Query the fonts in the specified scripts\n\turl.searchParams.append(\"subset\", scripts.join(\",\"));\n\n\t// If previewsOnly: Only query the characters contained in the font names\n\tif (previewsOnly) {\n\t\t// Concatenate the family names of all fonts\n\t\tconst familyNamesConcat = fonts.map((font): string => font.family).join(\"\");\n\t\t// Create a string with all characters (listed once) contained in the font family names\n\t\tconst downloadChars = familyNamesConcat\n\t\t\t.split(\"\")\n\t\t\t.filter((char, pos, self): boolean => self.indexOf(char) === pos)\n\t\t\t.join(\"\");\n\t\t// Query only the identified characters\n\t\turl.searchParams.append(\"text\", downloadChars);\n\t}\n\n\t// Tell browser to render fallback font immediately and swap in the new font once it's loaded\n\turl.searchParams.append(\"font-display\", \"swap\");\n\n\t// Fetch and return stylesheet\n\treturn get(url.href);\n}\n","import { applyActiveFont, applyFontPreview } from \"./font-styles/declarations\";\nimport {\n\tcreateStylesheet,\n\tfillStylesheet,\n\tsetStylesheetType,\n\tstylesheetExists,\n} from \"./font-styles/stylesheets\";\nimport extractFontStyles from \"./google-fonts/extractFontStyles\";\nimport getStylesheet from \"./google-fonts/fontStylesheet\";\nimport { Font, FontList, Script, Variant } from \"./types\";\n\n/**\n * Helper to get a font-face declaration\n */\nfunction getSimpleStylesheet(font: Font): string {\n      return `\n        @font-face {\n\n        font-family: '${font.family}';\n        font-style: normal;\n        font-weight: 400;\n        src: url(${font.url});`\n}\n\n/**\n * Get the Google Fonts stylesheet for the specified font (in the specified scripts and variants,\n * only the characters needed for creating the font previews), add the necessary CSS declarations to\n * apply them and add the fonts' stylesheets to the document head\n */\nexport async function loadFontPreviews(\n\tfonts: FontList,\n\tscripts: Script[],\n\tvariants: Variant[],\n\tselectorSuffix: string,\n): Promise<void> {\n\t// Only load previews of fonts which don't have a stylesheet (for preview or full font) yet\n\tconst fontsArray: Font[] = Array.from(fonts.values());\n\tconst fontsGoogle = fontsArray\n\t\t.filter((font: Font): boolean => font.url === '' || font.url === undefined)\n\tconst fontsToFetch = fontsArray\n\t\t.map((font: Font): string => font.id)\n\t\t.filter((fontId): boolean => !stylesheetExists(fontId));\n\n\t// Create stylesheet elements for all fonts which will be fetched (this prevents other font\n\t// pickers from loading the fonts as well)\n\tfontsToFetch.forEach((fontId): void => createStylesheet(fontId, true));\n\n\tlet fontStyles: Record<string, string> = {};\n  if (fontsGoogle.length > 0) {\n    // Get Google Fonts stylesheet containing all requested styles\n    const response = await getStylesheet(fontsGoogle, scripts, variants, true);\n    // Parse response and assign styles to the corresponding font\n    fontStyles = extractFontStyles(response);\n  }\n\n\t// Create separate stylesheets for the fonts\n\tfontsArray.forEach((font): void => {\n\t\tapplyFontPreview(font, selectorSuffix);\n\n\n\t\t// Add stylesheets for fonts which need to be downloaded\n\t\tif (fontsToFetch.includes(font.id)) {\n      let fontStyle = ''\n      if (font.url === '' || font.url === undefined || font.url === null) {\n        // Make sure response contains styles for the font\n        if (!(font.id in fontStyles)) {\n          console.error(\n            `Missing styles for font \"${font.family}\" (fontId \"${font.id}\") in Google Fonts response`,\n          );\n          return;\n        }\n        fontStyle = fontStyles[font.id]\n      } else {\n        fontStyle = getSimpleStylesheet(font)\n      }\n\t\t\t// Insert styles into the stylesheet element which was created earlier\n\t\t\tfillStylesheet(font.id, fontStyle);\n\t\t}\n\t});\n}\n\n/**\n * Get the Google Fonts stylesheet for the specified font (in the specified scripts and variants),\n * add the necessary CSS declarations to apply it and add the font's stylesheet to the document head\n */\nexport async function loadActiveFont(\n\tfont: Font,\n\tpreviousFontFamily: string,\n\tscripts: Script[],\n\tvariants: Variant[],\n\tselectorSuffix: string,\n): Promise<void> {\n\t// Only load font if it doesn't have a stylesheet yet\n\tif (stylesheetExists(font.id, false)) {\n\t\t// Add CSS declaration to apply the new active font\n\t\tapplyActiveFont(font, previousFontFamily, selectorSuffix);\n\t} else {\n\t\tif (stylesheetExists(font.id, true)) {\n\t\t\t// Update the stylesheet's \"data-is-preview\" attribute to \"false\"\n\t\t\tsetStylesheetType(font.id, false);\n\t\t} else {\n\t\t\t// Create stylesheet for the font to be fetched (this prevents other font pickers from loading\n\t\t\t// the font as well)\n\t\t\tcreateStylesheet(font.id, false);\n\t\t}\n\n    let fontStyle\n    if (font.url === '' || font.url === undefined || font.url === null) {\n      // Get Google Fonts stylesheet containing all requested styles\n      fontStyle = await getStylesheet([font], scripts, variants, false);\n    } else {\n      fontStyle = getSimpleStylesheet(font)\n    }\n\n\t\t// Add CSS declaration to apply the new active font\n\t\tapplyActiveFont(font, previousFontFamily, selectorSuffix);\n\n\t\t// Insert styles into the stylesheet element which was created earlier\n\t\tfillStylesheet(font.id, fontStyle);\n\t}\n}\n","export type Category = \"sans-serif\" | \"serif\" | \"display\" | \"handwriting\" | \"monospace\";\n\nexport type Script =\n\t| \"arabic\"\n\t| \"bengali\"\n\t| \"chinese-simplified\"\n\t| \"chinese-traditional\"\n\t| \"cyrillic\"\n\t| \"cyrillic-ext\"\n\t| \"devanagari\"\n\t| \"greek\"\n\t| \"greek-ext\"\n\t| \"gujarati\"\n\t| \"gurmukhi\"\n\t| \"hebrew\"\n\t| \"japanese\"\n\t| \"kannada\"\n\t| \"khmer\"\n\t| \"korean\"\n\t| \"latin\"\n\t| \"latin-ext\"\n\t| \"malayalam\"\n\t| \"myanmar\"\n\t| \"oriya\"\n\t| \"sinhala\"\n\t| \"tamil\"\n\t| \"​telugu\"\n\t| \"thai\"\n\t| \"vietnamese\";\n\nexport type SortOption = \"alphabet\" | \"popularity\";\n\nexport type Variant =\n\t| \"100\"\n\t| \"100italic\"\n\t| \"200\"\n\t| \"200italic\"\n\t| \"300\"\n\t| \"300italic\"\n\t| \"regular\"\n\t| \"italic\"\n\t| \"500\"\n\t| \"500italic\"\n\t| \"600\"\n\t| \"600italic\"\n\t| \"700\"\n\t| \"700italic\"\n\t| \"800\"\n\t| \"800italic\"\n\t| \"900\"\n\t| \"900italic\";\n\nexport interface Font {\n\t// Fields used by font-picker\n\tfamily: string;\n\tid: string;\n  url: string; // For fonts from custom url\n\tcategory: Category;\n\tscripts: Script[]; // Called \"subsets\" in Google Fonts API\n\tvariants: Variant[];\n\n\t// Other fields specified by the API\n\tkind?: string; // Usually \"webfonts#webfont\"\n\tversion?: string; // Version number\n\tlastModified?: string; // Date of last modification (yyyy-MM-dd)\n\tfiles?: Record<Variant, string>; // Font file for each variant\n}\n\nexport const FONT_FAMILY_DEFAULT = \"Open Sans\";\n\nexport type FontList = Map<string, Font>;\n\nexport interface Options {\n\tpickerId: string;\n\tfamilies: string[];\n\tcategories: Category[];\n\tscripts: Script[];\n\tvariants: Variant[];\n\tfilter: (font: Font) => boolean;\n\tlimit: number;\n\tsort: SortOption;\n}\n\nexport const OPTIONS_DEFAULTS: Options = {\n\tpickerId: \"\",\n\tfamilies: [],\n\tcategories: [],\n\tscripts: [\"latin\"],\n\tvariants: [\"regular\"],\n\tfilter: () => true,\n\tlimit: 50,\n\tsort: \"alphabet\",\n};\n","import \"./picker-styles/styles.scss\";\n\nimport getFontList from \"./google-fonts/fontList\";\nimport { loadActiveFont, loadFontPreviews } from \"./loadFonts\";\nimport { Font, FONT_FAMILY_DEFAULT, FontList, Options, OPTIONS_DEFAULTS } from \"./types\";\nimport { getFontId, validatePickerId } from \"./utils/ids\";\n\n/**\n * Class for managing the list of fonts for the font picker, keeping track of the active font and\n * downloading/activating Google Fonts\n */\nexport default class FontManager {\n\t// Parameters\n\n\tprivate readonly apiKey: string;\n\n\tprivate readonly options: Options;\n\n\tprivate onChange: (font: Font) => void;\n\n\t// Other class variables\n\n\t// Name of currently applied font\n\tprivate activeFontFamily: string;\n\n\t// Map from font families to font objects\n\tprivate fonts: FontList = new Map<string, Font>();\n\n\t// Suffix appended to CSS selectors which would have name clashes if multiple font pickers are\n\t// used on the same site (e.g. \"-test\" if the picker has pickerId \"test\" or \"\" if the picker\n\t// doesn't have an ID)\n\tpublic selectorSuffix: string;\n\n\t/**\n\t * Save relevant options, download the default font, add it to the font list and apply it\n\t */\n\tconstructor(\n\t\tapiKey: string,\n\t\tdefaultFamily: string = FONT_FAMILY_DEFAULT,\n\t\t{\n\t\t\tpickerId = OPTIONS_DEFAULTS.pickerId,\n\t\t\tfamilies = OPTIONS_DEFAULTS.families,\n\t\t\tcategories = OPTIONS_DEFAULTS.categories,\n\t\t\tscripts = OPTIONS_DEFAULTS.scripts,\n\t\t\tvariants = OPTIONS_DEFAULTS.variants,\n\t\t\tfilter = OPTIONS_DEFAULTS.filter,\n\t\t\tlimit = OPTIONS_DEFAULTS.limit,\n\t\t\tsort = OPTIONS_DEFAULTS.sort,\n\t\t}: Options,\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\t\tonChange: (font: Font) => void = (): void => {},\n\t) {\n\t\t// Validate pickerId parameter\n\t\tvalidatePickerId(pickerId);\n\t\tthis.selectorSuffix = pickerId ? `-${pickerId}` : \"\";\n\n\t\t// Save parameters as class variables\n\t\tthis.apiKey = apiKey;\n\t\tthis.options = {\n\t\t\tpickerId,\n\t\t\tfamilies,\n\t\t\tcategories,\n\t\t\tscripts,\n\t\t\tvariants,\n\t\t\tfilter,\n\t\t\tlimit,\n\t\t\tsort,\n\t\t};\n\t\tthis.onChange = onChange;\n\n\t\t// Download default font and add it to the empty font list\n\t\tthis.addFont(defaultFamily, false);\n\t\tthis.setActiveFont(defaultFamily, false);\n\t}\n\n\t/**\n\t * Fetch list of all fonts from Google Fonts API, filter it according to the class parameters and\n\t * save them to the font map\n\t */\n\tpublic async init(): Promise<FontList> {\n\t\t// Get list of all fonts\n\t\tconst fonts = await getFontList(this.apiKey);\n\n\t\t// Save desired fonts in the font map\n\t\tfor (let i = 0; i < fonts.length; i += 1) {\n\t\t\tconst font = fonts[i];\n\t\t\t// Exit once specified limit of number of fonts is reached\n\t\t\tif (this.fonts.size >= this.options.limit) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t// Skip default font if it is also contained in the list\n\t\t\t\t!this.fonts.has(font.family) &&\n\t\t\t\t// `families` parameter: Only keep fonts whose names are included in the provided array\n\t\t\t\t(this.options.families.length === 0 || this.options.families.includes(font.family)) &&\n\t\t\t\t// `categories` parameter: only keep fonts in categories from the provided array\n\t\t\t\t(this.options.categories.length === 0 || this.options.categories.includes(font.category)) &&\n\t\t\t\t// `scripts` parameter: Only keep fonts which are available in all specified scripts\n\t\t\t\tthis.options.scripts.every((script): boolean => font.scripts.includes(script)) &&\n\t\t\t\t// `variants` parameter: Only keep fonts which contain all specified variants\n\t\t\t\tthis.options.variants.every((variant): boolean => font.variants.includes(variant)) &&\n\t\t\t\t// `filter` parameter: Only keep fonts for which the `filter` function evaluates to `true`\n\t\t\t\tthis.options.filter(font) === true\n\t\t\t) {\n\t\t\t\t// Font fulfils all requirements: Add it to font map\n\t\t\t\tthis.fonts.set(font.family, font);\n\t\t\t}\n\t\t}\n\t\t// Download previews for all fonts in list except for default font (its full font has already\n\t\t// been downloaded)\n\t\tconst fontsToLoad = new Map(this.fonts);\n\t\tfontsToLoad.delete(this.activeFontFamily);\n\t\tloadFontPreviews(fontsToLoad, this.options.scripts, this.options.variants, this.selectorSuffix);\n\n\t\treturn this.fonts;\n\t}\n\n\t/**\n\t * Return font map\n\t */\n\tpublic getFonts(): FontList {\n\t\treturn this.fonts;\n\t}\n\n\t/**\n\t * Add a new font to the font map and download its preview characters\n\t */\n\tpublic addFont(fontFamily: string, downloadPreview = true, url = ''): void {\n\t\t// @ts-ignore: Custom font does not need `categories`, `scripts` and `variants` attributes\n\t\tconst font: Font = {\n\t\t\tfamily: fontFamily,\n\t\t\tid: getFontId(fontFamily),\n      url\n\t\t};\n\t\tthis.fonts.set(fontFamily, font);\n\n\t\t// Download font preview unless specified not to\n\t\tif (downloadPreview) {\n\t\t\tconst fontMap: FontList = new Map<string, Font>();\n\t\t\tfontMap.set(fontFamily, font);\n\t\t\tloadFontPreviews(fontMap, this.options.scripts, this.options.variants, this.selectorSuffix);\n\t\t}\n\t}\n\n\t/**\n\t * Remove the specified font from the font map\n\t */\n\tpublic removeFont(fontFamily: string): void {\n\t\tthis.fonts.delete(fontFamily);\n\t}\n\n\t/**\n\t * Return the font object of the currently active font\n\t */\n\tpublic getActiveFont(): Font {\n\t\tconst activeFont = this.fonts.get(this.activeFontFamily);\n\t\tif (!activeFont) {\n\t\t\tthrow Error(`Cannot get active font: \"${this.activeFontFamily}\" is not in the font list`);\n\t\t} else {\n\t\t\treturn activeFont;\n\t\t}\n\t}\n\n\t/**\n\t * Set the specified font as the active font and download it\n\t */\n\tpublic setActiveFont(fontFamily: string, runOnChange = true): void {\n\t\tconst previousFontFamily = this.activeFontFamily;\n\t\tconst activeFont = this.fonts.get(fontFamily);\n\t\tif (!activeFont) {\n\t\t\t// Font is not in fontList: Keep current activeFont and log error\n\t\t\tthrow Error(`Cannot update active font: \"${fontFamily}\" is not in the font list`);\n\t\t}\n\n\t\tthis.activeFontFamily = fontFamily;\n\t\tloadActiveFont(\n\t\t\tactiveFont,\n\t\t\tpreviousFontFamily,\n\t\t\tthis.options.scripts,\n\t\t\tthis.options.variants,\n\t\t\tthis.selectorSuffix,\n\t\t).then((): void => {\n\t\t\tif (runOnChange) {\n\t\t\t\tthis.onChange(activeFont);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Update the onChange function (executed when changing the active font)\n\t */\n\tpublic setOnChange(onChange: (font: Font) => void): void {\n\t\tthis.onChange = onChange;\n\t}\n}\n"],"names":[],"mappings":"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"}